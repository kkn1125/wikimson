export default {
    published: true,
    title: '인터럽트 기반 시스템',
    modified: '2022-02-26 12:11:32',
    done: true,
    tags: ['os', 'interrupt based system', '인터럽트 기반 시스템'],
    categories: ['cs','Operating System'],
    authors: ['kimson'],
    wrote: '2022-02-21 21:37:39',
    toc: true,
    md: true,
    content: [`
# 인터럽트 기반 시스템

> 현대 운영체제는 인터럽트 기반 시스템이다.

## 인터럽트

\`Interrupt\`란 "가로챈다" 라는 의미를 가진다. 인터럽트는 하드웨어적인 방법 또는 소프트웨어적인 방법으로 작동 될 수 있다.

### 인터럽트 서비스 루틴

OS 내에는 인터럽터가 걸렸을 때 실행되는 ${wikiFilter.toRef('cs-isr', '정의-1', 'Interrupt Service Routine')} (이하 "ISR") 이라는 코드가 존재하는데 마우스, 프린터 등등의 다양한 서비스 루틴이 존재한다.

인터럽트의 종류로는 아래와 같다.

1. 하드웨어 인터럽트
2. 소프트웨어 인터럽트

### 하드웨어 인터럽트

하드웨어 장치를 움직이거나 조작하게 되면 인터럽트가 발생하게 되는데 이를 *하드웨어 인터럽트*라 한다.

예를 들어, 컴퓨터를 부팅하여 \`메인 메모리\`의 \`ROM\`을 읽어 *Boot load*, *POST* 과정을 거쳐 화면이 나타났을 때, 마우스를 움직인다고 가정하자.

마우스를 움직이면 마우스에서 *전기신호(인터럽트)가 발생*한다. 이를 CPU에 *인터럽트가 걸린다*고 한다. 이때 CPU는 *하던 작업을 중지*하고 *OS 안에* 있는 \`Mouse Interrupt Service Routine (이하 "MISR")\`으로 *Jump*한다.

\`MISR\`이 실행되면서 화면에 마우스를 움직여준다. 그렇다면 나아가서, 마우스를 움직여 프로그램 아이콘 위에서 더블클릭을 해보자.

### 소프트웨어 인터럽트

\`hwp\` 프로그램을 더블클릭 했다고 가정할 때 또 인터럽트가 걸리면서 더블클릭에 대한 \`ISR\`이 실행되고 *해당 프로그램을 하드디스크에서 찾아 메인메모리에 올려준다.*

즉, 하드디스크를 읽는 것은 \`OS\`내의 코드를 통해 읽어들이고, 프로그램을 실행하는 관리자가 \`OS\`인 것이다. 메인 메모리에 올라온 \`hwp\` 프로그램이 하드디스크 내용을 읽으려면, 올라온 시점에서 *Software Interrupt*를 건다.

이때 마치 외부에서 인터럽트가 걸린 것처럼 \`OS\`로 *Jump*하게 된다. 그러면 \`OS\` 안에 있는 코드를 실행시켜 하드디스크 내용을 읽어 메인 메모리로 올린다. 다 읽고나면 원래의 \`hwp\` 프로그램으로 돌아오게 된다.

만일 하드디스크를 읽는 코드가 \`OS\`가 아닌 프로그램마다 존재한다면 중복이 많아지고, 하드디스크를 읽고 쓰는 코드는 보통 \`OS\`내에 존재한다.

위 내용 전반에 걸쳐 중요한 것은 \`OS\` 또한 프로그램이며, 많은 ISR 포함하여 그 외에 코드들의 집합이라는 것이다. *OS의 코드*들이 *실행되는 시점*은 *인터럽트가 걸렸을 때 실행된다는 것*이 포인트이다.

> 명령어로 인터럽트를 걸 수도 있는데 \`Assembly어\`에서 \`swi\`로 소프트웨어 인터럽트를 걸 수 있다.

## 인터럽트 기반 운영체제

운영체제는 메인 메모리에 올라와 있어도 평소에는 아무 일도 안 한다. 그렇다면 언제 실행 될까?

\`ISR\`설명 중에 언급되었지만 \`OS\`가 실행이 되는 시점은 인터럽트가 걸렸을 때 실행된다.

인터럽트의 발생은 아래의 3가지에서 발생한다.

1. 하드웨어 인터럽트
2. 소프트웨어 인터럽트
3. 내부 인터럽트(Internal Interrupt)

### 내부 인터럽트

예를 들어, 코드를 작성할 때 5를 0으로 나누는 코드가 있다고 가정 했을 때 이 값은 infinity(무한대)가 된다. 무한대의 값을 저장할 수는 없기 때문에 이러한 이벤트(사건)이 발생하게 되면 CPU는 내부적으로 인터럽트가 걸린 것으로 판단하고, 어떤 값을 0으로 나누었을 때 \`OS\` 안의 \`Divide By Zero\` 라는 \`Routine\`을 실행하게 된다.

해당 루틴에는 통상 잘못된 시도를 한 프로그램을 강제로 종료시키도록 되어있다. 이후에는 원래 대기상태 혹은 사용자 프로그램으로 돌아간다.
`,
    ],
    ref: [
        {
            name: '경성대 양희재 교수님 - 2강 고등운영체제, 인터럽트 기반 운영체제',
            link: 'http://www.kocw.net/home/cview.do?mty=p&kemId=978503',
        },
    ],
    template(){
        this.title = this.origin.name;
        return `
        ${wikiFilter.all.call(this)}
        `
    }
}

// th: 핵심|설명@
// tb: !Model|데이터를 가지고 로직을 처리한다. 데이터베이스와 대응 될 수 있다\\
// !View|요청된 페이지를 데이터 처리의 과정을 거쳐 브라우저에 나타낼 요소들을 출력해주는 역할을 한다.\\
// !Controller|사용자의 요청을 받아 요청에 맞는 Model의 로직을 실행하고 데이터의 흐름을 제어한다.@
// :end