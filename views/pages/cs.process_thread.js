export default {
    published: true,
    modified: '',
    done: true,
    title: '프로세스와 스레드',
    tags: ['프로세스', '스레드'],
    categories: ['CS'],
    authors: ['kimson'],
    wrote: '2021-11-29 20:06:54',
    toc: true,
    content: [
        `
        <div><span class="h3">프로세스와 스레드</span></div>
        <div>
            <div>
                <div>
                    <span class="h6">정의</span>
                    th: 구분|설명@
                    tb: !프로세스|프로그램을 구동하여 프로그램 자체와 프로그램의 상태가 메모리 상에서 실
                    행되는 작업 단위를 말합니다. 메모리에 올라와 실행되고 있는 프로그램의
                    인스턴스(독립적 개체)라고 할 수 있고, CPU 자원의 할당을 받을 수 있고,
                    프로세스에 할당되는 메모리에는 스택, 힙, 데이터, 코드 영역을 포함합니다.\\
                    !스레드|프로세스 내에서 실행되는 흐름의 단위이고 일반적으로 한 프로그램에 하나의 스레드를 가지지만 프로그램 환경에 따라 둘 이상 스레드를 동시에 실행 가능하며, 이를 멀티스레드하고 합니다. 스레드 간에는 프로세스 주소나 자원을 공유할 수 있습니다. 스레드는 각자 독립적으로 작업을 수행해야 하기 때문에 스레드 기본 데이터를 가집니다.\\
                    !스레드 기본 데이터|스레드도 프로세스와 마찬가지로 하나의 실행 흐름이며, 관련 데이터가 필요합니다. 일반적으로 스레드는 자신만의 고유 스레드 ID, Program Counter (PC), 레지스터 집합, 스택을 가집니다. 코드, 데이터, 파일 등 기타 자원은 프로세스 내 다른 스레드와 공유합니다.\\
                    !PC|Program Counter의 줄임말로, 다음에 실행될 명령어의 주소가 들어있는 레지스터이며, 명령어가 인출되면, 자동으로 다음 명령어를 가리키도록 주소값이 증가됩니다.\\
                    !PCB|Process Control Block의 약자로, 프로세스 제어 블록입니다. 프로세스에 대한 중요한 정보를 저장하고 있고, 운영체제가 프로세스를 표현한 것이라고도 합니다. 프로세스 생성 시 만들어지며, 주 기억장치에 유지됩니다. 문맥전환 등 다른 프로세스를 처리해야 할 때, PCB에 현재 상태를 저장함으로써 나중에 그 작업 상태를 불러와 작업 재개가 가능해집니다. PID, 상태, 다음 명령어 주소 등의 정보가 저장됩니다.\\
                    !캐시메모리|CPU의 레지스터와 메모리 사이에서 버퍼역할을 하며, 데이터의 병목현상 완화에 사용됩니다.@
                    :end
                </div>
            </div>

            <div>
                <div>
                    <span class="h6">멀티 프로세스와 멀티 스레드</span>
                    th: 구분|설명@
                    tb: !멀티 프로세스|<span>멀티프로세스는 하나의 프로그램을 여러개의 프로세스로 구성하여 각 프로세스가 하나의 작업을 처리하는 것 입니다.</span>
                        <ul>
                            <li>하나의 프로세스가 잘못 되어도 프로그램은 동작 합니다.</li>
                            <li>#context switching[context-switching|정의]:end 비용이 발생합니다.</li>
                        </ul>\\
                        !멀티 스레드|<span>프로그램을 여러 개의 스레드로 구성하고 각 스레드가 작업을 처리하는 것 입니다.</span>
                        <ul>
                            <li>시스템 자원 소모와 처리비용가 감소하고 스레드 간 자원 공유가 가능합니다.</li>
                            <li>디버깅이 어렵고 동기화 이슈를 안고 있으며 하나의 스레드 오류로 전체 프로세스에 문제가 발생합니다.</li>
                            <li>#교착상태(dead-lock)[dead-lock|정의]:end가 발생하지 않도록 주의해야합니다.</li>
                        </ul>@
                        :end
                </div>
            </div>
        </div>
        `,
    ],
    ref: [
        {
            name:'이해를 돕는 강의 <span class="tag tag-danger">Youtube</span>',
            link:'https://www.youtube.com/watch?v=kNNHaAaFDs8'
        },
    ],
    template(){
        return `
        ${wikiFilter.all.call(this)}
        `
    }
};